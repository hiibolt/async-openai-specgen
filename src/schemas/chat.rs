use super::assistants_chat::ResponseFormatJsonSchema;
use super::assistants_chat_responses::ResponseFormatJsonObject;
use super::assistants_chat_responses::ResponseFormatText;
use super::chat_responses::CreateModelResponseProperties;

use std::collections::HashMap;
use serde::{Serialize, Deserialize};

/// Specifying a particular function via `{"name": "my_function"}` forces the model to call that function.
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
pub struct ChatCompletionFunctionCallOption {
	/// The name of the function to call.
	pub name: String,
}
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
pub struct ChatCompletionFunctions {
	/// A description of what the function does, used by the model to choose when and how to call the function.
	#[serde(skip_serializing_if = "Option::is_none")]
	pub description: Option<String>,
	/// The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
	pub name: String,
	#[serde(skip_serializing_if = "Option::is_none")]
	pub parameters: Option<FunctionParameters>,
}
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
pub struct ChatCompletionMessageToolCall {
	/// The function that the model called.
	pub function: ChatCompletionMessageToolCallFunction,
	/// The ID of the tool call.
	pub id: String,
	/// The type of the tool. Currently, only `function` is supported.
	pub r#type: ChatCompletionMessageToolCallType,
}
/// The function that the model called.
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
pub struct ChatCompletionMessageToolCallFunction {
	/// The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
	pub arguments: String,
	/// The name of the function to call.
	pub name: String,
}
/// The type of the tool. Currently, only `function` is supported.
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
#[serde(rename_all = "lowercase")]
pub enum ChatCompletionMessageToolCallType {
	Function,
}
/// Specifies a tool the model should use. Use to force the model to call a specific function.
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
pub struct ChatCompletionNamedToolChoice {
	pub function: ChatCompletionNamedToolChoiceFunction,
	/// The type of the tool. Currently, only `function` is supported.
	pub r#type: ChatCompletionNamedToolChoiceType,
}
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
pub struct ChatCompletionNamedToolChoiceFunction {
	/// The name of the function to call.
	pub name: String,
}
/// The type of the tool. Currently, only `function` is supported.
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
#[serde(rename_all = "lowercase")]
pub enum ChatCompletionNamedToolChoiceType {
	Function,
}
/// Messages sent by the model in response to user messages.
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
pub struct ChatCompletionRequestAssistantMessage {
	/// Data about a previous audio response from the model. 
	/// [Learn more](https://platform.openai.com/docs/guides/audio).
	#[serde(skip_serializing_if = "Option::is_none")]
	pub audio: Option<ChatCompletionRequestAssistantMessageAudio>,
	/// The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified.
	#[serde(skip_serializing_if = "Option::is_none")]
	pub content: Option<ChatCompletionRequestAssistantMessageContent>,
	/// Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
	#[serde(skip_serializing_if = "Option::is_none")]
	pub function_call: Option<ChatCompletionRequestAssistantMessageFunctionCall>,
	/// An optional name for the participant. Provides the model information to differentiate between participants of the same role.
	#[serde(skip_serializing_if = "Option::is_none")]
	pub name: Option<String>,
	/// The refusal message by the assistant.
	#[serde(skip_serializing_if = "Option::is_none")]
	pub refusal: Option<String>,
	/// The role of the messages author, in this case `assistant`.
	pub role: ChatCompletionRequestAssistantMessageRole,
	#[serde(skip_serializing_if = "Option::is_none")]
	pub tool_calls: Option<ChatCompletionMessageToolCalls>,
}
/// Data about a previous audio response from the model. 
/// [Learn more](https://platform.openai.com/docs/guides/audio).
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
pub struct ChatCompletionRequestAssistantMessageAudio {
	/// Unique identifier for a previous audio response from the model.
	pub id: String,
}
/// The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified.
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
#[serde(rename_all = "lowercase")]
#[serde(untagged)]
pub enum ChatCompletionRequestAssistantMessageContent {
	String(String),
	ChatCompletionRequestAssistantMessageContentChatCompletionRequestAssistantMessageContentPartArray(ChatCompletionRequestAssistantMessageContentChatCompletionRequestAssistantMessageContentPartArray),
}
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
#[serde(rename_all = "lowercase")]
#[serde(untagged)]
pub enum ChatCompletionRequestAssistantMessageContentPart {
	ChatCompletionRequestMessageContentPartText(ChatCompletionRequestMessageContentPartText),
	ChatCompletionRequestMessageContentPartRefusal(ChatCompletionRequestMessageContentPartRefusal),
}
/// Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
pub struct ChatCompletionRequestAssistantMessageFunctionCall {
	/// The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
	pub arguments: String,
	/// The name of the function to call.
	pub name: String,
}
/// The role of the messages author, in this case `assistant`.
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
#[serde(rename_all = "lowercase")]
pub enum ChatCompletionRequestAssistantMessageRole {
	Assistant,
}
/// Developer-provided instructions that the model should follow, regardless of
/// messages sent by the user. With o1 models and newer, `developer` messages
/// replace the previous `system` messages.
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
pub struct ChatCompletionRequestDeveloperMessage {
	/// The contents of the developer message.
	pub content: ChatCompletionRequestDeveloperMessageContent,
	/// An optional name for the participant. Provides the model information to differentiate between participants of the same role.
	#[serde(skip_serializing_if = "Option::is_none")]
	pub name: Option<String>,
	/// The role of the messages author, in this case `developer`.
	pub role: ChatCompletionRequestDeveloperMessageRole,
}
/// The contents of the developer message.
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
#[serde(rename_all = "lowercase")]
#[serde(untagged)]
pub enum ChatCompletionRequestDeveloperMessageContent {
	String(String),
	ChatCompletionRequestDeveloperMessageContentChatCompletionRequestMessageContentPartTextArray(ChatCompletionRequestDeveloperMessageContentChatCompletionRequestMessageContentPartTextArray),
}
/// The role of the messages author, in this case `developer`.
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
#[serde(rename_all = "lowercase")]
pub enum ChatCompletionRequestDeveloperMessageRole {
	Developer,
}
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
pub struct ChatCompletionRequestFunctionMessage {
	/// The contents of the function message.
	pub content: String,
	/// The name of the function to call.
	pub name: String,
	/// The role of the messages author, in this case `function`.
	pub role: ChatCompletionRequestFunctionMessageRole,
}
/// The role of the messages author, in this case `function`.
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
#[serde(rename_all = "lowercase")]
pub enum ChatCompletionRequestFunctionMessageRole {
	Function,
}
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
#[serde(rename_all = "lowercase")]
#[serde(untagged)]
pub enum ChatCompletionRequestMessage {
	ChatCompletionRequestDeveloperMessage(ChatCompletionRequestDeveloperMessage),
	ChatCompletionRequestSystemMessage(ChatCompletionRequestSystemMessage),
	ChatCompletionRequestUserMessage(ChatCompletionRequestUserMessage),
	ChatCompletionRequestAssistantMessage(ChatCompletionRequestAssistantMessage),
	ChatCompletionRequestToolMessage(ChatCompletionRequestToolMessage),
	ChatCompletionRequestFunctionMessage(ChatCompletionRequestFunctionMessage),
}
/// Learn about [audio inputs](https://platform.openai.com/docs/guides/audio).
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
pub struct ChatCompletionRequestMessageContentPartAudio {
	pub input_audio: ChatCompletionRequestMessageContentPartAudioInputAudio,
	/// The type of the content part. Always `input_audio`.
	pub r#type: ChatCompletionRequestMessageContentPartAudioType,
}
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
pub struct ChatCompletionRequestMessageContentPartAudioInputAudio {
	/// Base64 encoded audio data.
	pub data: String,
	/// The format of the encoded audio data. Currently supports "wav" and "mp3".
	pub format: ChatCompletionRequestMessageContentPartAudioInputAudioFormat,
}
/// The format of the encoded audio data. Currently supports "wav" and "mp3".
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
#[serde(rename_all = "lowercase")]
pub enum ChatCompletionRequestMessageContentPartAudioInputAudioFormat {
	Wav,
	Mp3,
}
/// The type of the content part. Always `input_audio`.
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
#[serde(rename_all = "lowercase")]
pub enum ChatCompletionRequestMessageContentPartAudioType {
	#[serde(rename = "input_audio")]
	InputAudio,
}
/// Learn about [file inputs](https://platform.openai.com/docs/guides/text) for text generation.
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
pub struct ChatCompletionRequestMessageContentPartFile {
	pub file: ChatCompletionRequestMessageContentPartFileFile,
	/// The type of the content part. Always `file`.
	pub r#type: ChatCompletionRequestMessageContentPartFileType,
}
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq, Default)]
pub struct ChatCompletionRequestMessageContentPartFileFile {
	/// The base64 encoded file data, used when passing the file to the model 
	/// as a string.
	#[serde(skip_serializing_if = "Option::is_none")]
	pub file_data: Option<String>,
	/// The ID of an uploaded file to use as input.
	#[serde(skip_serializing_if = "Option::is_none")]
	pub file_id: Option<String>,
	/// The name of the file, used when passing the file to the model as a 
	/// string.
	#[serde(skip_serializing_if = "Option::is_none")]
	pub filename: Option<String>,
}
/// The type of the content part. Always `file`.
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
#[serde(rename_all = "lowercase")]
pub enum ChatCompletionRequestMessageContentPartFileType {
	File,
}
/// Learn about [image inputs](https://platform.openai.com/docs/guides/vision).
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
pub struct ChatCompletionRequestMessageContentPartImage {
	pub image_url: ChatCompletionRequestMessageContentPartImageImageUrl,
	/// The type of the content part.
	pub r#type: ChatCompletionRequestMessageContentPartImageType,
}
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
pub struct ChatCompletionRequestMessageContentPartImageImageUrl {
	/// Specifies the detail level of the image. Learn more in the [Vision guide](https://platform.openai.com/docs/guides/vision#low-or-high-fidelity-image-understanding).
	#[serde(skip_serializing_if = "Option::is_none")]
	pub detail: Option<ChatCompletionRequestMessageContentPartImageImageUrlDetail>,
	/// Either a URL of the image or the base64 encoded image data.
	pub url: String,
}
/// Specifies the detail level of the image. Learn more in the [Vision guide](https://platform.openai.com/docs/guides/vision#low-or-high-fidelity-image-understanding).
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
#[serde(rename_all = "lowercase")]
pub enum ChatCompletionRequestMessageContentPartImageImageUrlDetail {
	Auto,
	Low,
	High,
}
/// The type of the content part.
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
#[serde(rename_all = "lowercase")]
pub enum ChatCompletionRequestMessageContentPartImageType {
	#[serde(rename = "image_url")]
	ImageUrl,
}
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
pub struct ChatCompletionRequestMessageContentPartRefusal {
	/// The refusal message generated by the model.
	pub refusal: String,
	/// The type of the content part.
	pub r#type: ChatCompletionRequestMessageContentPartRefusalType,
}
/// The type of the content part.
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
#[serde(rename_all = "lowercase")]
pub enum ChatCompletionRequestMessageContentPartRefusalType {
	Refusal,
}
/// Learn about [text inputs](https://platform.openai.com/docs/guides/text-generation).
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
pub struct ChatCompletionRequestMessageContentPartText {
	/// The text content.
	pub text: String,
	/// The type of the content part.
	pub r#type: ChatCompletionRequestMessageContentPartTextType,
}
/// The type of the content part.
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
#[serde(rename_all = "lowercase")]
pub enum ChatCompletionRequestMessageContentPartTextType {
	Text,
}
/// Developer-provided instructions that the model should follow, regardless of
/// messages sent by the user. With o1 models and newer, use `developer` messages
/// for this purpose instead.
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
pub struct ChatCompletionRequestSystemMessage {
	/// The contents of the system message.
	pub content: ChatCompletionRequestSystemMessageContent,
	/// An optional name for the participant. Provides the model information to differentiate between participants of the same role.
	#[serde(skip_serializing_if = "Option::is_none")]
	pub name: Option<String>,
	/// The role of the messages author, in this case `system`.
	pub role: ChatCompletionRequestSystemMessageRole,
}
/// The contents of the system message.
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
#[serde(rename_all = "lowercase")]
#[serde(untagged)]
pub enum ChatCompletionRequestSystemMessageContent {
	String(String),
	ChatCompletionRequestSystemMessageContentChatCompletionRequestSystemMessageContentPartArray(ChatCompletionRequestSystemMessageContentChatCompletionRequestSystemMessageContentPartArray),
}
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
#[serde(rename_all = "lowercase")]
#[serde(untagged)]
pub enum ChatCompletionRequestSystemMessageContentPart {
	ChatCompletionRequestMessageContentPartText(ChatCompletionRequestMessageContentPartText),
}
/// The role of the messages author, in this case `system`.
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
#[serde(rename_all = "lowercase")]
pub enum ChatCompletionRequestSystemMessageRole {
	System,
}
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
pub struct ChatCompletionRequestToolMessage {
	/// The contents of the tool message.
	pub content: ChatCompletionRequestToolMessageContent,
	/// The role of the messages author, in this case `tool`.
	pub role: ChatCompletionRequestToolMessageRole,
	/// Tool call that this message is responding to.
	pub tool_call_id: String,
}
/// The contents of the tool message.
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
#[serde(rename_all = "lowercase")]
#[serde(untagged)]
pub enum ChatCompletionRequestToolMessageContent {
	String(String),
	ChatCompletionRequestToolMessageContentChatCompletionRequestToolMessageContentPartArray(ChatCompletionRequestToolMessageContentChatCompletionRequestToolMessageContentPartArray),
}
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
#[serde(rename_all = "lowercase")]
#[serde(untagged)]
pub enum ChatCompletionRequestToolMessageContentPart {
	ChatCompletionRequestMessageContentPartText(ChatCompletionRequestMessageContentPartText),
}
/// The role of the messages author, in this case `tool`.
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
#[serde(rename_all = "lowercase")]
pub enum ChatCompletionRequestToolMessageRole {
	Tool,
}
/// Messages sent by an end user, containing prompts or additional context
/// information.
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
pub struct ChatCompletionRequestUserMessage {
	/// The contents of the user message.
	pub content: ChatCompletionRequestUserMessageContent,
	/// An optional name for the participant. Provides the model information to differentiate between participants of the same role.
	#[serde(skip_serializing_if = "Option::is_none")]
	pub name: Option<String>,
	/// The role of the messages author, in this case `user`.
	pub role: ChatCompletionRequestUserMessageRole,
}
/// The contents of the user message.
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
#[serde(rename_all = "lowercase")]
#[serde(untagged)]
pub enum ChatCompletionRequestUserMessageContent {
	String(String),
	ChatCompletionRequestUserMessageContentChatCompletionRequestUserMessageContentPartArray(ChatCompletionRequestUserMessageContentChatCompletionRequestUserMessageContentPartArray),
}
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
#[serde(rename_all = "lowercase")]
#[serde(untagged)]
pub enum ChatCompletionRequestUserMessageContentPart {
	ChatCompletionRequestMessageContentPartText(ChatCompletionRequestMessageContentPartText),
	ChatCompletionRequestMessageContentPartImage(ChatCompletionRequestMessageContentPartImage),
	ChatCompletionRequestMessageContentPartAudio(ChatCompletionRequestMessageContentPartAudio),
	ChatCompletionRequestMessageContentPartFile(ChatCompletionRequestMessageContentPartFile),
}
/// The role of the messages author, in this case `user`.
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
#[serde(rename_all = "lowercase")]
pub enum ChatCompletionRequestUserMessageRole {
	User,
}
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
pub struct ChatCompletionTool {
	pub function: FunctionObject,
	/// The type of the tool. Currently, only `function` is supported.
	pub r#type: ChatCompletionToolType,
}
/// Controls which (if any) tool is called by the model.
/// `none` means the model will not call any tool and instead generates a message.
/// `auto` means the model can pick between generating a message or calling one or more tools.
/// `required` means the model must call one or more tools.
/// Specifying a particular tool via `{"type": "function", "function": {"name": "my_function"}}` forces the model to call that tool.
/// 
/// `none` is the default when no tools are present. `auto` is the default if tools are present.
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
#[serde(rename_all = "lowercase")]
#[serde(untagged)]
pub enum ChatCompletionToolChoiceOption {
	None(String),
	Auto(String),
	Required(String),
	ChatCompletionNamedToolChoice(ChatCompletionNamedToolChoice),
}
/// The type of the tool. Currently, only `function` is supported.
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
#[serde(rename_all = "lowercase")]
pub enum ChatCompletionToolType {
	Function,
}
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq, Default)]
pub struct CreateChatCompletionRequest {
	/// Parameters for audio output. Required when audio output is requested with
	/// `modalities: ["audio"]`. [Learn more](https://platform.openai.com/docs/guides/audio).
	#[serde(skip_serializing_if = "Option::is_none")]
	pub audio: Option<CreateChatCompletionRequestAudio>,
	/// Number between -2.0 and 2.0. Positive values penalize new tokens based on
	/// their existing frequency in the text so far, decreasing the model's
	/// likelihood to repeat the same line verbatim.
	#[serde(skip_serializing_if = "Option::is_none")]
	pub frequency_penalty: Option<f64>,
	/// Deprecated in favor of `tool_choice`.
	/// 
	/// Controls which (if any) function is called by the model.
	/// 
	/// `none` means the model will not call a function and instead generates a
	/// message.
	/// 
	/// `auto` means the model can pick between generating a message or calling a
	/// function.
	/// 
	/// Specifying a particular function via `{"name": "my_function"}` forces the
	/// model to call that function.
	/// 
	/// `none` is the default when no functions are present. `auto` is the default
	/// if functions are present.
	#[serde(skip_serializing_if = "Option::is_none")]
	pub function_call: Option<CreateChatCompletionRequestFunctionCall>,
	/// Deprecated in favor of `tools`.
	/// 
	/// A list of functions the model may generate JSON inputs for.
	#[serde(skip_serializing_if = "Option::is_none")]
	pub functions: Option<Vec<ChatCompletionFunctions>>,
	/// Modify the likelihood of specified tokens appearing in the completion.
	/// 
	/// Accepts a JSON object that maps tokens (specified by their token ID in the
	/// tokenizer) to an associated bias value from -100 to 100. Mathematically,
	/// the bias is added to the logits generated by the model prior to sampling.
	/// The exact effect will vary per model, but values between -1 and 1 should
	/// decrease or increase likelihood of selection; values like -100 or 100
	/// should result in a ban or exclusive selection of the relevant token.
	#[serde(skip_serializing_if = "Option::is_none")]
	pub logit_bias: Option<serde_json::Value>,
	/// Whether to return log probabilities of the output tokens or not. If true,
	/// returns the log probabilities of each output token returned in the
	/// `content` of `message`.
	#[serde(skip_serializing_if = "Option::is_none")]
	pub logprobs: Option<bool>,
	/// An upper bound for the number of tokens that can be generated for a completion, including visible output tokens and [reasoning tokens](https://platform.openai.com/docs/guides/reasoning).
	#[serde(skip_serializing_if = "Option::is_none")]
	pub max_completion_tokens: Option<i64>,
	/// The maximum number of [tokens](/tokenizer) that can be generated in the
	/// chat completion. This value can be used to control
	/// [costs](https://openai.com/api/pricing/) for text generated via API.
	/// 
	/// This value is now deprecated in favor of `max_completion_tokens`, and is
	/// not compatible with [o1 series models](https://platform.openai.com/docs/guides/reasoning).
	#[serde(skip_serializing_if = "Option::is_none")]
	pub max_tokens: Option<i64>,
	/// A list of messages comprising the conversation so far. Depending on the
	/// [model](https://platform.openai.com/docs/models) you use, different message types (modalities) are
	/// supported, like [text](https://platform.openai.com/docs/guides/text-generation),
	/// [images](https://platform.openai.com/docs/guides/vision), and [audio](https://platform.openai.com/docs/guides/audio).
	#[serde(skip_serializing_if = "Option::is_none")]
	pub messages: Option<Vec<ChatCompletionRequestMessage>>,
	#[serde(skip_serializing_if = "Option::is_none")]
	pub metadata: Option<Metadata>,
	#[serde(skip_serializing_if = "Option::is_none")]
	pub modalities: Option<ResponseModalities>,
	/// Model ID used to generate the response, like `gpt-4o` or `o1`. OpenAI
	/// offers a wide range of models with different capabilities, performance
	/// characteristics, and price points. Refer to the [model guide](https://platform.openai.com/docs/models)
	/// to browse and compare available models.
	#[serde(skip_serializing_if = "Option::is_none")]
	pub model: Option<ModelIdsShared>,
	/// How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.
	#[serde(skip_serializing_if = "Option::is_none")]
	pub n: Option<i64>,
	#[serde(skip_serializing_if = "Option::is_none")]
	pub parallel_tool_calls: Option<ParallelToolCalls>,
	/// Configuration for a [Predicted Output](https://platform.openai.com/docs/guides/predicted-outputs),
	/// which can greatly improve response times when large parts of the model
	/// response are known ahead of time. This is most common when you are
	/// regenerating a file with only minor changes to most of the content.
	#[serde(skip_serializing_if = "Option::is_none")]
	pub prediction: Option<CreateChatCompletionRequestPrediction>,
	/// Number between -2.0 and 2.0. Positive values penalize new tokens based on
	/// whether they appear in the text so far, increasing the model's likelihood
	/// to talk about new topics.
	#[serde(skip_serializing_if = "Option::is_none")]
	pub presence_penalty: Option<f64>,
	#[serde(skip_serializing_if = "Option::is_none")]
	pub reasoning_effort: Option<ReasoningEffort>,
	/// An object specifying the format that the model must output.
	/// 
	/// Setting to `{ "type": "json_schema", "json_schema": {...} }` enables
	/// Structured Outputs which ensures the model will match your supplied JSON
	/// schema. Learn more in the [Structured Outputs
	/// guide](https://platform.openai.com/docs/guides/structured-outputs).
	/// 
	/// Setting to `{ "type": "json_object" }` enables the older JSON mode, which
	/// ensures the message the model generates is valid JSON. Using `json_schema`
	/// is preferred for models that support it.
	#[serde(skip_serializing_if = "Option::is_none")]
	pub response_format: Option<CreateChatCompletionRequestResponseFormat>,
	/// This feature is in Beta.
	/// If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.
	/// Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.
	#[serde(skip_serializing_if = "Option::is_none")]
	pub seed: Option<i64>,
	/// Specifies the latency tier to use for processing the request. This parameter is relevant for customers subscribed to the scale tier service:
	///   - If set to 'auto', and the Project is Scale tier enabled, the system
	///     will utilize scale tier credits until they are exhausted.
	///   - If set to 'auto', and the Project is not Scale tier enabled, the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.
	///   - If set to 'default', the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.
	///   - When not set, the default behavior is 'auto'.
	/// 
	///   When this parameter is set, the response body will include the `service_tier` utilized.
	#[serde(skip_serializing_if = "Option::is_none")]
	pub service_tier: Option<CreateChatCompletionRequestServiceTier>,
	#[serde(skip_serializing_if = "Option::is_none")]
	pub stop: Option<StopConfiguration>,
	/// Whether or not to store the output of this chat completion request for 
	/// use in our [model distillation](https://platform.openai.com/docs/guides/distillation) or
	/// [evals](https://platform.openai.com/docs/guides/evals) products.
	#[serde(skip_serializing_if = "Option::is_none")]
	pub store: Option<bool>,
	/// If set to true, the model response data will be streamed to the client
	/// as it is generated using [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).
	/// See the [Streaming section below](https://platform.openai.com/docs/api-reference/chat/streaming)
	/// for more information, along with the [streaming responses](https://platform.openai.com/docs/guides/streaming-responses)
	/// guide for more information on how to handle the streaming events.
	#[serde(skip_serializing_if = "Option::is_none")]
	pub stream: Option<bool>,
	#[serde(skip_serializing_if = "Option::is_none")]
	pub stream_options: Option<ChatCompletionStreamOptions>,
	/// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
	/// We generally recommend altering this or `top_p` but not both.
	#[serde(skip_serializing_if = "Option::is_none")]
	pub temperature: Option<f64>,
	#[serde(skip_serializing_if = "Option::is_none")]
	pub tool_choice: Option<ChatCompletionToolChoiceOption>,
	/// A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.
	#[serde(skip_serializing_if = "Option::is_none")]
	pub tools: Option<Vec<ChatCompletionTool>>,
	/// An integer between 0 and 20 specifying the number of most likely tokens to
	/// return at each token position, each with an associated log probability.
	/// `logprobs` must be set to `true` if this parameter is used.
	#[serde(skip_serializing_if = "Option::is_none")]
	pub top_logprobs: Option<i64>,
	/// An alternative to sampling with temperature, called nucleus sampling,
	/// where the model considers the results of the tokens with top_p probability
	/// mass. So 0.1 means only the tokens comprising the top 10% probability mass
	/// are considered.
	/// 
	/// We generally recommend altering this or `temperature` but not both.
	#[serde(skip_serializing_if = "Option::is_none")]
	pub top_p: Option<f64>,
	/// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#end-user-ids).
	#[serde(skip_serializing_if = "Option::is_none")]
	pub user: Option<String>,
	/// This tool searches the web for relevant results to use in a response.
	/// Learn more about the [web search tool](https://platform.openai.com/docs/guides/tools-web-search?api-mode=chat).
	#[serde(skip_serializing_if = "Option::is_none")]
	pub web_search_options: Option<CreateChatCompletionRequestWebSearchOptions>,
}
/// Parameters for audio output. Required when audio output is requested with
/// `modalities: ["audio"]`. [Learn more](https://platform.openai.com/docs/guides/audio).
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
pub struct CreateChatCompletionRequestAudio {
	/// Specifies the output audio format. Must be one of `wav`, `mp3`, `flac`,
	/// `opus`, or `pcm16`.
	pub format: CreateChatCompletionRequestAudioFormat,
	/// The voice the model uses to respond. Supported voices are 
	/// `alloy`, `ash`, `ballad`, `coral`, `echo`, `sage`, and `shimmer`.
	pub voice: VoiceIdsShared,
}
/// Specifies the output audio format. Must be one of `wav`, `mp3`, `flac`,
/// `opus`, or `pcm16`.
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
#[serde(rename_all = "lowercase")]
pub enum CreateChatCompletionRequestAudioFormat {
	Wav,
	Mp3,
	Flac,
	Opus,
	Pcm16,
}
/// Deprecated in favor of `tool_choice`.
/// 
/// Controls which (if any) function is called by the model.
/// 
/// `none` means the model will not call a function and instead generates a
/// message.
/// 
/// `auto` means the model can pick between generating a message or calling a
/// function.
/// 
/// Specifying a particular function via `{"name": "my_function"}` forces the
/// model to call that function.
/// 
/// `none` is the default when no functions are present. `auto` is the default
/// if functions are present.
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
#[serde(rename_all = "lowercase")]
#[serde(untagged)]
pub enum CreateChatCompletionRequestFunctionCall {
	None(String),
	Auto(String),
	ChatCompletionFunctionCallOption(ChatCompletionFunctionCallOption),
}
/// Configuration for a [Predicted Output](https://platform.openai.com/docs/guides/predicted-outputs),
/// which can greatly improve response times when large parts of the model
/// response are known ahead of time. This is most common when you are
/// regenerating a file with only minor changes to most of the content.
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
#[serde(rename_all = "lowercase")]
#[serde(untagged)]
pub enum CreateChatCompletionRequestPrediction {
	PredictionContent(PredictionContent),
}
/// An object specifying the format that the model must output.
/// 
/// Setting to `{ "type": "json_schema", "json_schema": {...} }` enables
/// Structured Outputs which ensures the model will match your supplied JSON
/// schema. Learn more in the [Structured Outputs
/// guide](https://platform.openai.com/docs/guides/structured-outputs).
/// 
/// Setting to `{ "type": "json_object" }` enables the older JSON mode, which
/// ensures the message the model generates is valid JSON. Using `json_schema`
/// is preferred for models that support it.
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
#[serde(rename_all = "lowercase")]
#[serde(untagged)]
pub enum CreateChatCompletionRequestResponseFormat {
	ResponseFormatText(ResponseFormatText),
	ResponseFormatJsonSchema(ResponseFormatJsonSchema),
	ResponseFormatJsonObject(ResponseFormatJsonObject),
}
/// Specifies the latency tier to use for processing the request. This parameter is relevant for customers subscribed to the scale tier service:
///   - If set to 'auto', and the Project is Scale tier enabled, the system
///     will utilize scale tier credits until they are exhausted.
///   - If set to 'auto', and the Project is not Scale tier enabled, the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.
///   - If set to 'default', the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.
///   - When not set, the default behavior is 'auto'.
/// 
///   When this parameter is set, the response body will include the `service_tier` utilized.
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
#[serde(rename_all = "lowercase")]
pub enum CreateChatCompletionRequestServiceTier {
	Auto,
	Default,
}
/// This tool searches the web for relevant results to use in a response.
/// Learn more about the [web search tool](https://platform.openai.com/docs/guides/tools-web-search?api-mode=chat).
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq, Default)]
pub struct CreateChatCompletionRequestWebSearchOptions {
	#[serde(skip_serializing_if = "Option::is_none")]
	pub search_context_size: Option<WebSearchContextSize>,
	/// Approximate location parameters for the search.
	#[serde(skip_serializing_if = "Option::is_none")]
	pub user_location: Option<CreateChatCompletionRequestWebSearchOptionsUserLocation>,
}
/// Approximate location parameters for the search.
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
pub struct CreateChatCompletionRequestWebSearchOptionsUserLocation {
	pub approximate: WebSearchLocation,
	/// The type of location approximation. Always `approximate`.
	pub r#type: CreateChatCompletionRequestWebSearchOptionsUserLocationType,
}
/// The type of location approximation. Always `approximate`.
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
#[serde(rename_all = "lowercase")]
pub enum CreateChatCompletionRequestWebSearchOptionsUserLocationType {
	Approximate,
}
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq, Default)]
pub struct ModelResponseProperties {
	#[serde(skip_serializing_if = "Option::is_none")]
	pub metadata: Option<Metadata>,
	/// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
	/// We generally recommend altering this or `top_p` but not both.
	#[serde(skip_serializing_if = "Option::is_none")]
	pub temperature: Option<f64>,
	/// An alternative to sampling with temperature, called nucleus sampling,
	/// where the model considers the results of the tokens with top_p probability
	/// mass. So 0.1 means only the tokens comprising the top 10% probability mass
	/// are considered.
	/// 
	/// We generally recommend altering this or `temperature` but not both.
	#[serde(skip_serializing_if = "Option::is_none")]
	pub top_p: Option<f64>,
	/// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#end-user-ids).
	#[serde(skip_serializing_if = "Option::is_none")]
	pub user: Option<String>,
}
/// Static predicted output content, such as the content of a text file that is
/// being regenerated.
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
pub struct PredictionContent {
	/// The content that should be matched when generating a model response.
	/// If generated tokens would match this content, the entire model response
	/// can be returned much more quickly.
	pub content: PredictionContentContent,
	/// The type of the predicted content you want to provide. This type is
	/// currently always `content`.
	pub r#type: PredictionContentType,
}
/// The content that should be matched when generating a model response.
/// If generated tokens would match this content, the entire model response
/// can be returned much more quickly.
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
#[serde(rename_all = "lowercase")]
#[serde(untagged)]
pub enum PredictionContentContent {
	String(String),
	PredictionContentContentChatCompletionRequestMessageContentPartTextArray(PredictionContentContentChatCompletionRequestMessageContentPartTextArray),
}
/// The type of the predicted content you want to provide. This type is
/// currently always `content`.
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
#[serde(rename_all = "lowercase")]
pub enum PredictionContentType {
	Content,
}
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
#[serde(rename_all = "lowercase")]
pub enum ResponseModalitiesItem {
	Text,
	Audio,
}
