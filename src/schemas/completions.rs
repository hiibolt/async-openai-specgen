
use std::collections::HashMap;
use serde::{Serialize, Deserialize};

#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
pub struct CreateCompletionRequest {
	/// Generates `best_of` completions server-side and returns the "best" (the one with the highest log probability per token). Results cannot be streamed.
	/// 
	/// When used with `n`, `best_of` controls the number of candidate completions and `n` specifies how many to return â€“ `best_of` must be greater than `n`.
	/// 
	/// **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.
	#[serde(skip_serializing_if = "Option::is_none")]
	pub best_of: Option<i64>,
	/// Echo back the prompt in addition to the completion
	#[serde(skip_serializing_if = "Option::is_none")]
	pub echo: Option<bool>,
	/// Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
	/// 
	/// [See more information about frequency and presence penalties.](https://platform.openai.com/docs/guides/text-generation)
	#[serde(skip_serializing_if = "Option::is_none")]
	pub frequency_penalty: Option<f64>,
	/// Modify the likelihood of specified tokens appearing in the completion.
	/// 
	/// Accepts a JSON object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
	/// 
	/// As an example, you can pass `{"50256": -100}` to prevent the <|endoftext|> token from being generated.
	#[serde(skip_serializing_if = "Option::is_none")]
	pub logit_bias: Option<serde_json::Value>,
	/// Include the log probabilities on the `logprobs` most likely output tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.
	/// 
	/// The maximum value for `logprobs` is 5.
	#[serde(skip_serializing_if = "Option::is_none")]
	pub logprobs: Option<i64>,
	/// The maximum number of [tokens](/tokenizer) that can be generated in the completion.
	/// 
	/// The token count of your prompt plus `max_tokens` cannot exceed the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.
	#[serde(skip_serializing_if = "Option::is_none")]
	pub max_tokens: Option<i64>,
	/// ID of the model to use. You can use the [List models](https://platform.openai.com/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](https://platform.openai.com/docs/models) for descriptions of them.
	pub model: CreateCompletionRequestModel,
	/// How many completions to generate for each prompt.
	/// 
	/// **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.
	#[serde(skip_serializing_if = "Option::is_none")]
	pub n: Option<i64>,
	/// Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
	/// 
	/// [See more information about frequency and presence penalties.](https://platform.openai.com/docs/guides/text-generation)
	#[serde(skip_serializing_if = "Option::is_none")]
	pub presence_penalty: Option<f64>,
	/// The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.
	/// 
	/// Note that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document.
	pub prompt: CreateCompletionRequestPrompt,
	/// If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.
	/// 
	/// Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.
	#[serde(skip_serializing_if = "Option::is_none")]
	pub seed: Option<i64>,
	#[serde(skip_serializing_if = "Option::is_none")]
	pub stop: Option<StopConfiguration>,
	/// Whether to stream back partial progress. If set, tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).
	#[serde(skip_serializing_if = "Option::is_none")]
	pub stream: Option<bool>,
	#[serde(skip_serializing_if = "Option::is_none")]
	pub stream_options: Option<ChatCompletionStreamOptions>,
	/// The suffix that comes after a completion of inserted text.
	/// 
	/// This parameter is only supported for `gpt-3.5-turbo-instruct`.
	#[serde(skip_serializing_if = "Option::is_none")]
	pub suffix: Option<String>,
	/// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
	/// 
	/// We generally recommend altering this or `top_p` but not both.
	#[serde(skip_serializing_if = "Option::is_none")]
	pub temperature: Option<f64>,
	/// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
	/// 
	/// We generally recommend altering this or `temperature` but not both.
	#[serde(skip_serializing_if = "Option::is_none")]
	pub top_p: Option<f64>,
	/// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#end-user-ids).
	#[serde(skip_serializing_if = "Option::is_none")]
	pub user: Option<String>,
}
/// The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.
/// 
/// Note that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document.
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
#[serde(rename_all = "lowercase")]
#[serde(untagged)]
pub enum CreateCompletionRequestPrompt {
	String(String),
	CreateCompletionRequestPromptStringArray(CreateCompletionRequestPromptStringArray),
	CreateCompletionRequestPromptIntegerArray(CreateCompletionRequestPromptIntegerArray),
	CreateCompletionRequestPromptArrayArray(CreateCompletionRequestPromptArrayArray),
}
