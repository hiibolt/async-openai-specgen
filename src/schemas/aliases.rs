/// The tool calls generated by the model, such as function calls.
pub type ChatCompletionMessageToolCalls = Vec<ChatCompletionMessageToolCall>;

/// An array of content parts with a defined type. Can be one or more of type `text`, or exactly one of type `refusal`.
pub type ChatCompletionRequestAssistantMessageContentChatCompletionRequestAssistantMessageContentPartArray = Vec<ChatCompletionRequestAssistantMessageContentPart>;

/// An array of content parts with a defined type. For developer messages, only type `text` is supported.
pub type ChatCompletionRequestDeveloperMessageContentChatCompletionRequestMessageContentPartTextArray = Vec<ChatCompletionRequestMessageContentPartText>;

/// An array of content parts with a defined type. For system messages, only type `text` is supported.
pub type ChatCompletionRequestSystemMessageContentChatCompletionRequestSystemMessageContentPartArray = Vec<ChatCompletionRequestSystemMessageContentPart>;

/// An array of content parts with a defined type. For tool messages, only type `text` is supported.
pub type ChatCompletionRequestToolMessageContentChatCompletionRequestToolMessageContentPartArray = Vec<ChatCompletionRequestToolMessageContentPart>;

/// An array of content parts with a defined type. Supported options differ based on the [model](/docs/models) being used to generate the response. Can contain text, image, or audio inputs.
pub type ChatCompletionRequestUserMessageContentChatCompletionRequestUserMessageContentPartArray = Vec<ChatCompletionRequestUserMessageContentPart>;

/// Any of:
/// ---------------
/// {
/// 	type:
/// 	"string",
/// }
/// ---------------
/// {
/// 	AssistantSupportedModels,
/// }
/// ---------------
pub type CreateAssistantRequestModel = serde_json::Value;

/// Any of:
/// ---------------
/// {
/// 	type:
/// 	"string",
/// }
/// ---------------
/// {
/// 	type:
/// 	"string",
/// 	enum:
/// 	[
/// 				"gpt-3.5-turbo-instruct",
/// 				"davinci-002",
/// 				"babbage-002",
/// 	],
/// }
/// ---------------
pub type CreateCompletionRequestModel = serde_json::Value;

pub type CreateCompletionRequestPromptArrayArray = Vec<Vec<Vec<i64>>>;

pub type CreateCompletionRequestPromptIntegerArray = Vec<i64>;

pub type CreateCompletionRequestPromptStringArray = Vec<String>;

/// The array of arrays containing integers that will be turned into an embedding.
pub type CreateEmbeddingRequestInputArrayArray = Vec<Vec<Vec<i64>>>;

/// The array of integers that will be turned into an embedding.
pub type CreateEmbeddingRequestInputIntegerArray = Vec<i64>;

/// The array of strings that will be turned into an embedding.
pub type CreateEmbeddingRequestInputStringArray = Vec<String>;

/// Any of:
/// ---------------
/// {
/// 	type:
/// 	"string",
/// }
/// ---------------
/// {
/// 	type:
/// 	"string",
/// 	enum:
/// 	[
/// 				"text-embedding-ada-002",
/// 				"text-embedding-3-small",
/// 				"text-embedding-3-large",
/// 	],
/// }
/// ---------------
pub type CreateEmbeddingRequestModel = serde_json::Value;

/// Any of:
/// ---------------
/// {
/// 	type:
/// 	"string",
/// }
/// ---------------
/// {
/// 	type:
/// 	"string",
/// 	enum:
/// 	[
/// 				"babbage-002",
/// 				"davinci-002",
/// 				"gpt-3.5-turbo",
/// 				"gpt-4o-mini",
/// 	],
/// }
/// ---------------
pub type CreateFineTuningJobRequestModel = serde_json::Value;

/// Any of:
/// ---------------
/// {
/// 	type:
/// 	"string",
/// }
/// ---------------
/// {
/// 	type:
/// 	"string",
/// 	enum:
/// 	[
/// 				"dall-e-2",
/// 				"dall-e-3",
/// 	],
/// }
/// ---------------
pub type CreateImageRequestModel = serde_json::Value;

/// An array of content parts with a defined type, each can be of type `text` or images can be passed with `image_url` or `image_file`. Image types are only supported on [Vision-compatible models](/docs/models).
pub type CreateMessageRequestContentVariedArray = Vec<CreateMessageRequestContentItems>;

/// An array of strings to classify for moderation.
pub type CreateModerationRequestInputStringArray = Vec<String>;

/// An array of multi-modal inputs to the moderation model.
pub type CreateModerationRequestInputVariedArray = Vec<CreateModerationRequestInputItems>;

/// Any of:
/// ---------------
/// {
/// 	type:
/// 	"string",
/// }
/// ---------------
/// {
/// 	type:
/// 	"string",
/// 	enum:
/// 	[
/// 				"omni-moderation-latest",
/// 				"omni-moderation-2024-09-26",
/// 				"text-moderation-latest",
/// 				"text-moderation-stable",
/// 	],
/// }
/// ---------------
pub type CreateModerationRequestModel = serde_json::Value;

/// A list of one or many input items to the model, containing 
/// different content types.
pub type CreateResponseInputInputItemArray = Vec<InputItem>;

/// Any of:
/// ---------------
/// {
/// 	type:
/// 	"string",
/// }
/// ---------------
/// {
/// 	AssistantSupportedModels,
/// }
/// ---------------
pub type CreateRunRequestModel = serde_json::Value;

pub type CreateRunRequestToolChoice = AssistantsApiToolChoiceOption;

/// Any of:
/// ---------------
/// {
/// 	type:
/// 	"string",
/// }
/// ---------------
/// {
/// 	type:
/// 	"string",
/// 	enum:
/// 	[
/// 				"tts-1",
/// 				"tts-1-hd",
/// 				"gpt-4o-mini-tts",
/// 	],
/// }
/// ---------------
pub type CreateSpeechRequestModel = serde_json::Value;

/// Any of:
/// ---------------
/// {
/// 	type:
/// 	"string",
/// }
/// ---------------
/// {
/// 	type:
/// 	"string",
/// 	enum:
/// 	[
/// 				"gpt-4o",
/// 				"gpt-4o-2024-11-20",
/// 				"gpt-4o-2024-08-06",
/// 				"gpt-4o-2024-05-13",
/// 				"gpt-4o-mini",
/// 				"gpt-4o-mini-2024-07-18",
/// 				"gpt-4.5-preview",
/// 				"gpt-4.5-preview-2025-02-27",
/// 				"gpt-4-turbo",
/// 				"gpt-4-turbo-2024-04-09",
/// 				"gpt-4-0125-preview",
/// 				"gpt-4-turbo-preview",
/// 				"gpt-4-1106-preview",
/// 				"gpt-4-vision-preview",
/// 				"gpt-4",
/// 				"gpt-4-0314",
/// 				"gpt-4-0613",
/// 				"gpt-4-32k",
/// 				"gpt-4-32k-0314",
/// 				"gpt-4-32k-0613",
/// 				"gpt-3.5-turbo",
/// 				"gpt-3.5-turbo-16k",
/// 				"gpt-3.5-turbo-0613",
/// 				"gpt-3.5-turbo-1106",
/// 				"gpt-3.5-turbo-0125",
/// 				"gpt-3.5-turbo-16k-0613",
/// 	],
/// }
/// ---------------
pub type CreateThreadAndRunRequestModel = serde_json::Value;

pub type CreateThreadAndRunRequestToolChoice = AssistantsApiToolChoiceOption;

/// The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format. 
/// 
/// Omitting `parameters` defines a function with an empty parameter list.
pub type FunctionParameters = serde_json::Value;

/// A list of one or many input items to the model, containing different content 
/// types.
pub type InputMessageContentList = Vec<InputContent>;

/// Set of 16 key-value pairs that can be attached to an object. This can be
/// useful for storing additional information about the object in a structured
/// format, and querying for objects via API or the dashboard. 
/// 
/// Keys are strings with a maximum length of 64 characters. Values are strings
/// with a maximum length of 512 characters.
pub type Metadata = HashMap<String, String>;

/// Any of:
/// ---------------
/// {
/// 	ModelIdsShared,
/// }
/// ---------------
/// {
/// 	type:
/// 	"string",
/// 	enum:
/// 	[
/// 				"o1-pro",
/// 				"o1-pro-2025-03-19",
/// 				"computer-use-preview",
/// 				"computer-use-preview-2025-03-11",
/// 	],
/// }
/// ---------------
pub type ModelIdsResponses = serde_json::Value;

/// Any of:
/// ---------------
/// {
/// 	type:
/// 	"string",
/// }
/// ---------------
/// {
/// 	type:
/// 	"string",
/// 	enum:
/// 	[
/// 				"o3-mini",
/// 				"o3-mini-2025-01-31",
/// 				"o1",
/// 				"o1-2024-12-17",
/// 				"o1-preview",
/// 				"o1-preview-2024-09-12",
/// 				"o1-mini",
/// 				"o1-mini-2024-09-12",
/// 				"gpt-4o",
/// 				"gpt-4o-2024-11-20",
/// 				"gpt-4o-2024-08-06",
/// 				"gpt-4o-2024-05-13",
/// 				"gpt-4o-audio-preview",
/// 				"gpt-4o-audio-preview-2024-10-01",
/// 				"gpt-4o-audio-preview-2024-12-17",
/// 				"gpt-4o-mini-audio-preview",
/// 				"gpt-4o-mini-audio-preview-2024-12-17",
/// 				"gpt-4o-search-preview",
/// 				"gpt-4o-mini-search-preview",
/// 				"gpt-4o-search-preview-2025-03-11",
/// 				"gpt-4o-mini-search-preview-2025-03-11",
/// 				"chatgpt-4o-latest",
/// 				"gpt-4o-mini",
/// 				"gpt-4o-mini-2024-07-18",
/// 				"gpt-4-turbo",
/// 				"gpt-4-turbo-2024-04-09",
/// 				"gpt-4-0125-preview",
/// 				"gpt-4-turbo-preview",
/// 				"gpt-4-1106-preview",
/// 				"gpt-4-vision-preview",
/// 				"gpt-4",
/// 				"gpt-4-0314",
/// 				"gpt-4-0613",
/// 				"gpt-4-32k",
/// 				"gpt-4-32k-0314",
/// 				"gpt-4-32k-0613",
/// 				"gpt-3.5-turbo",
/// 				"gpt-3.5-turbo-16k",
/// 				"gpt-3.5-turbo-0301",
/// 				"gpt-3.5-turbo-0613",
/// 				"gpt-3.5-turbo-1106",
/// 				"gpt-3.5-turbo-0125",
/// 				"gpt-3.5-turbo-16k-0613",
/// 	],
/// }
/// ---------------
pub type ModelIdsShared = serde_json::Value;

/// Any of:
/// ---------------
/// {
/// 	type:
/// 	"string",
/// }
/// ---------------
/// {
/// 	AssistantSupportedModels,
/// }
/// ---------------
pub type ModifyAssistantRequestModel = serde_json::Value;

/// Whether to enable [parallel function calling](/docs/guides/function-calling#configuring-parallel-function-calling) during tool use.
pub type ParallelToolCalls = bool;

/// An array of content parts with a defined type. Supported options differ based on the [model](/docs/models) being used to generate the response. Can contain text inputs.
pub type PredictionContentContentChatCompletionRequestMessageContentPartTextArray = Vec<ChatCompletionRequestMessageContentPartText>;

/// The schema for the response format, described as a JSON Schema object.
/// Learn how to build JSON schemas [here](https://json-schema.org/).
pub type ResponseFormatJsonSchemaSchema = serde_json::Value;

/// Output types that you would like the model to generate.
/// Most models are capable of generating text, which is the default:
/// 
/// `["text"]`
/// 
/// The `gpt-4o-audio-preview` model can also be used to 
/// [generate audio](/docs/guides/audio). To request that this model generate 
/// both text and audio responses, you can use:
/// 
/// `["text", "audio"]`
pub type ResponseModalities = Vec<ResponseModalitiesItem>;

pub type StopConfigurationStringArray = Vec<String>;

/// Set of 16 key-value pairs that can be attached to an object. This can be 
/// useful for storing additional information about the object in a structured 
/// format, and querying for objects via API or the dashboard. Keys are strings 
/// with a maximum length of 64 characters. Values are strings with a maximum 
/// length of 512 characters, booleans, or numbers.
pub type VectorStoreFileAttributes = serde_json::Value;

pub type VectorStoreSearchRequestQueryStringArray = Vec<String>;

/// Any of:
/// ---------------
/// {
/// 	type:
/// 	"string",
/// }
/// ---------------
/// {
/// 	type:
/// 	"string",
/// 	enum:
/// 	[
/// 				"alloy",
/// 				"ash",
/// 				"ballad",
/// 				"coral",
/// 				"echo",
/// 				"fable",
/// 				"onyx",
/// 				"nova",
/// 				"sage",
/// 				"shimmer",
/// 				"verse",
/// 	],
/// }
/// ---------------
pub type VoiceIdsShared = serde_json::Value;

